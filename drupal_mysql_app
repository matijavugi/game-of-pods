################################
##
##          FRONTEND
##
################################

apiVersion: v1
kind: PersistentVolume
metadata:
  name: drupal-pv
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/drupal-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drupal-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drupal
  labels:
    app: drupal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drupal
      tier: frontend
  template:
    metadata:
      labels:
        app: drupal
        tier: frontend
    spec:
      initContainers:
      - name: init-sites-volume
        image: drupal:8.6
        command: [ "/bin/bash", "-c" ]
        args: [ 'cp -r /var/www/html/sites/ /data/; chown www-data:www-data /data/ -R' ]
        volumeMounts:
        - mountPath: /data
          name: drupal-pv-storage
      containers:
      - name: drupal
        image: drupal:8.6
        volumeMounts:
        - name: drupal-pv-storage
          mountPath: /var/www/html/modules
          subPath: modules
        - name: drupal-pv-storage
          mountPath: /var/www/html/profiles
          subPath: profiles
        - name: drupal-pv-storage
          mountPath: /var/www/html/sites
          subPath: sites
        - name: drupal-pv-storage
          mountPath: /var/www/html/themes
          subPath: themes
      volumes:
        - name: drupal-pv-storage
          persistentVolumeClaim:
            claimName: drupal-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: drupal-service
spec:
  type: NodePort
  selector:
    app: drupal
    tier: frontend
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30095
      
################################
##
##          DATABASE
##
################################

apiVersion: v1
kind: PersistentVolume
metadata:
  name: drupal-mysql-pv
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/drupal-mysql-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drupal-mysql-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: drupal-mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: root_password # run base64
  MYSQL_DATABASE: drupal-database    # run base64
  ROOT_DB_USER: root
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drupal-mysql
  labels:
    db: drupal-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      db: drupal-mysql
      tier: mysql
  template:
    metadata:
      labels:
        db: drupal-mysql
        tier: mysql
    spec:
      containers:
      - name: drupal-mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: drupal-mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: drupal-mysql-secret
                key: MYSQL_DATABASE
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: drupal-mysql-secret
                key: DB_USER
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
          subPath: dbdata
        ports:
        - containerPort: 3306
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: drupal-mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: drupal-mysql-service
  labels:
    app: drupal
spec:
  selector:
    db: drupal-mysql
    tier: mysql
  ports:
    - port: 3306



# Ako secret ne prolazi:
# kubectl create secret generic drupal-mysql-secret --from-literal=MYSQL_DATABASE=drupal-database --from-literal=MYSQL_ROOT_PASSWORD=root_password
      
